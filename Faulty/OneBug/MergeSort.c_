#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

#define MAX 100
int arr[MAX];
pthread_mutex_t mutex;

void merge(int low, int mid, int high) {
    int i, j, k, n1 = mid - low + 1, n2 = high - mid;
    int left[n1], right[n2];

    for (i = 0; i < n1; i++) left[i] = arr[low + i];
    for (j = 0; j < n2; j++) right[j] = arr[mid + 1 + j];

    i = 0, j = 0, k = low;

     // Lock during the merge process
    while (i < n1 && j < n2) {
        if (left[i] <= right[j]) arr[k++] = left[i++];
        else arr[k++] = right[j++];
    }
    while (i < n1) arr[k++] = left[i++];
    while (j < n2) arr[k++] = right[j++];
     // Unlock after merge is done
}

void* merge_sort(void* arg) {
    int* range = (int*) arg;
    int low = range[0], high = range[1];

    if (low < high) {
        int mid = low + (high - low) / 2;
        pthread_t left_thread, right_thread;

        int left_range[] = {low, mid};
        int right_range[] = {mid + 1, high};

        pthread_create(&left_thread, NULL, merge_sort, left_range);
        pthread_create(&right_thread, NULL, merge_sort, right_range);

        pthread_join(left_thread, NULL);
        pthread_join(right_thread, NULL);

        merge(low, mid, high);
    }
    return NULL;
}

int main() {
    pthread_t thread;
    int n = 10;

    // Fill array with random values
    for (int i = 0; i < n; i++) arr[i] = rand() % 100;

    printf("Unsorted array:\n");
    for (int i = 0; i < n; i++) printf("%d ", arr[i]);
    printf("\n");

    pthread_mutex_init(&mutex, NULL);

    int range[] = {0, n - 1};
    pthread_create(&thread, NULL, merge_sort, range);
    pthread_join(thread, NULL);

    pthread_mutex_destroy(&mutex);

    printf("Sorted array:\n");
    for (int i = 0; i < n; i++) printf("%d ", arr[i]);
    printf("\n");

    return 0;
}
